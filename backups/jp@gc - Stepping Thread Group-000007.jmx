<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.5">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
    </TestPlan>
    <hashTree>
      <kg.apc.jmeter.threads.SteppingThreadGroup guiclass="kg.apc.jmeter.threads.SteppingThreadGroupGui" testclass="kg.apc.jmeter.threads.SteppingThreadGroup" testname="LoadTesting - Stepping Thread Group" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="Threads initial delay">0</stringProp>
        <stringProp name="Start users count">0</stringProp>
        <stringProp name="Start users count burst">0</stringProp>
        <stringProp name="Start users period">0</stringProp>
        <stringProp name="Stop users count">0</stringProp>
        <stringProp name="Stop users period">0</stringProp>
        <stringProp name="flighttime">0</stringProp>
        <stringProp name="rampUp">0</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
      </kg.apc.jmeter.threads.SteppingThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetBeareToken" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="client_id" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">infor-idp-client</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">client_id</stringProp>
              </elementProp>
              <elementProp name="client_secret" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">secret</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">client_secret</stringProp>
              </elementProp>
              <elementProp name="grant_type" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">password</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">grant_type</stringProp>
              </elementProp>
              <elementProp name="scope" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">evolution</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">scope</stringProp>
              </elementProp>
              <elementProp name="username" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">MANAGER</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">username</stringProp>
              </elementProp>
              <elementProp name="password" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">master*1</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">password</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">inforapia.hyland.com</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/identityprovider/connect/token</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">bearer_token</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.access_token</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">TokenNotFound</stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="StageUpload" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;fileExtension&quot; : &quot;png&quot;,&#xd;
    &quot;fileSize&quot; : 4125&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">inforapia.hyland.com</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/apiserver/onbase/core/documents/uploads</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">import org.apache.jmeter.protocol.http.control.Header;

sampler.getHeaderManager().add(new Header(&quot;Authorization&quot;,&quot;Bearer &quot; +vars.get(&quot;bearer_token&quot;)));
</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">ctx.getCurrentSampler().getHeaderManager().removeHeaderNamed(&quot;Authorization&quot;);</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">Upload_ID</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.id</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">NotFound</stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="BinaryUpload" enabled="true">
          <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
            <collectionProp name="HTTPFileArgs.files">
              <elementProp name="C:\Users\dchoudhary\Documents\test data\PNG\img.png" elementType="HTTPFileArg">
                <stringProp name="File.path">C:\Users\dchoudhary\Documents\test data\PNG\img.png</stringProp>
                <stringProp name="File.paramname">Name</stringProp>
                <stringProp name="File.mimetype">image/png</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="filePart" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">1</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">filePart</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">inforapia.hyland.com</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/ApiServer/onbase/core/documents/uploads/${Upload_ID}?filePart=1</stringProp>
          <stringProp name="HTTPSampler.method">PUT</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">import org.apache.jmeter.protocol.http.control.Header;

sampler.getHeaderManager().add(new Header(&quot;Authorization&quot;,&quot;Bearer &quot; +vars.get(&quot;bearer_token&quot;)));
</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">ctx.getCurrentSampler().getHeaderManager().removeHeaderNamed(&quot;Authorization&quot;);</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DefaultKeywords" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">inforapia.hyland.com</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/apiserver/onbase/core/document-types/101/default-keywords</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">import org.apache.jmeter.protocol.http.control.Header;

sampler.getHeaderManager().add(new Header(&quot;Authorization&quot;,&quot;Bearer &quot; +vars.get(&quot;bearer_token&quot;)));
</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">ctx.getCurrentSampler().getHeaderManager().removeHeaderNamed(&quot;Authorization&quot;);</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">Keywordguid</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.keywordGuid</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">NotFound</stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ArchiveDocument" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;documentTypeId&quot;: &quot;101&quot;,&#xd;
  &quot;fileTypeId&quot;: &quot;1&quot;,&#xd;
  &quot;uploads&quot;: [&#xd;
    {&#xd;
      &quot;id&quot;: &quot;${Upload_ID}&quot;&#xd;
    }&#xd;
  ],&#xd;
  &quot;keywordCollection&quot;: {&#xd;
    &quot;keywordGuid&quot;: &quot;${Keywordguid}&quot;,&#xd;
    &quot;items&quot;: [&#xd;
      {&#xd;
        &quot;keywords&quot;: [&#xd;
          {&#xd;
            &quot;typeId&quot;: &quot;161&quot;,&#xd;
            &quot;values&quot;: []&#xd;
          },&#xd;
          {&#xd;
            &quot;typeId&quot;: &quot;162&quot;,&#xd;
            &quot;values&quot;: []&#xd;
          },&#xd;
          {&#xd;
            &quot;typeId&quot;: &quot;120&quot;,&#xd;
            &quot;values&quot;: [&#xd;
              {&#xd;
                &quot;value&quot;: &quot;DFLT&quot;&#xd;
              }&#xd;
            ]&#xd;
          },&#xd;
          {&#xd;
            &quot;typeId&quot;: &quot;121&quot;,&#xd;
            &quot;values&quot;: []&#xd;
          },&#xd;
          {&#xd;
            &quot;typeId&quot;: &quot;122&quot;,&#xd;
            &quot;values&quot;: [&#xd;
              {&#xd;
                &quot;value&quot;: &quot;100&quot;&#xd;
              }&#xd;
            ]&#xd;
          },&#xd;
          {&#xd;
            &quot;typeId&quot;: &quot;123&quot;,&#xd;
            &quot;values&quot;: []&#xd;
          },&#xd;
          {&#xd;
            &quot;typeId&quot;: &quot;124&quot;,&#xd;
            &quot;values&quot;: [&#xd;
              {&#xd;
                &quot;value&quot;: &quot;1&quot;&#xd;
              }&#xd;
            ]&#xd;
          },&#xd;
          {&#xd;
            &quot;typeId&quot;: &quot;125&quot;,&#xd;
            &quot;values&quot;: [&#xd;
              {&#xd;
                &quot;value&quot;: &quot;STAPLES&quot;&#xd;
              }&#xd;
            ]&#xd;
          },&#xd;
          {&#xd;
            &quot;typeId&quot;: &quot;126&quot;,&#xd;
            &quot;values&quot;: [&#xd;
              {&#xd;
                &quot;value&quot;: &quot;Invoice100&quot;&#xd;
              }&#xd;
            ]&#xd;
          },&#xd;
          {&#xd;
            &quot;typeId&quot;: &quot;127&quot;,&#xd;
            &quot;values&quot;: []&#xd;
          },&#xd;
          {&#xd;
            &quot;typeId&quot;: &quot;128&quot;,&#xd;
            &quot;values&quot;: []&#xd;
          },&#xd;
          {&#xd;
            &quot;typeId&quot;: &quot;129&quot;,&#xd;
            &quot;values&quot;: []&#xd;
          },&#xd;
          {&#xd;
            &quot;typeId&quot;: &quot;130&quot;,&#xd;
            &quot;values&quot;: []&#xd;
          },&#xd;
          {&#xd;
            &quot;typeId&quot;: &quot;131&quot;,&#xd;
            &quot;values&quot;: []&#xd;
          },&#xd;
          {&#xd;
            &quot;typeId&quot;: &quot;132&quot;,&#xd;
            &quot;values&quot;: [&#xd;
              {&#xd;
                &quot;value&quot;: &quot;2021-08-10&quot;&#xd;
              }&#xd;
            ]&#xd;
          },&#xd;
          {&#xd;
            &quot;typeId&quot;: &quot;133&quot;,&#xd;
            &quot;values&quot;: []&#xd;
          },&#xd;
          {&#xd;
            &quot;typeId&quot;: &quot;134&quot;,&#xd;
            &quot;values&quot;: []&#xd;
          },&#xd;
          {&#xd;
            &quot;typeId&quot;: &quot;135&quot;,&#xd;
            &quot;values&quot;: [&#xd;
              {&#xd;
                &quot;value&quot;: &quot;100&quot;&#xd;
              }&#xd;
            ]&#xd;
          },&#xd;
          {&#xd;
            &quot;typeId&quot;: &quot;136&quot;,&#xd;
            &quot;values&quot;: []&#xd;
          },&#xd;
          {&#xd;
            &quot;typeId&quot;: &quot;137&quot;,&#xd;
            &quot;values&quot;: []&#xd;
          },&#xd;
          {&#xd;
            &quot;typeId&quot;: &quot;138&quot;,&#xd;
            &quot;values&quot;: []&#xd;
          },&#xd;
          {&#xd;
            &quot;typeId&quot;: &quot;139&quot;,&#xd;
            &quot;values&quot;: []&#xd;
          },&#xd;
          {&#xd;
            &quot;typeId&quot;: &quot;140&quot;,&#xd;
            &quot;values&quot;: []&#xd;
          },&#xd;
          {&#xd;
            &quot;typeId&quot;: &quot;141&quot;,&#xd;
            &quot;values&quot;: []&#xd;
          },&#xd;
          {&#xd;
            &quot;typeId&quot;: &quot;142&quot;,&#xd;
            &quot;values&quot;: []&#xd;
          },&#xd;
          {&#xd;
            &quot;typeId&quot;: &quot;1&quot;,&#xd;
            &quot;values&quot;: []&#xd;
          },&#xd;
          {&#xd;
            &quot;typeId&quot;: &quot;143&quot;,&#xd;
            &quot;values&quot;: []&#xd;
          },&#xd;
          {&#xd;
            &quot;typeId&quot;: &quot;144&quot;,&#xd;
            &quot;values&quot;: []&#xd;
          },&#xd;
          {&#xd;
            &quot;typeId&quot;: &quot;145&quot;,&#xd;
            &quot;values&quot;: []&#xd;
          },&#xd;
          {&#xd;
            &quot;typeId&quot;: &quot;146&quot;,&#xd;
            &quot;values&quot;: []&#xd;
          },&#xd;
          {&#xd;
            &quot;typeId&quot;: &quot;147&quot;,&#xd;
            &quot;values&quot;: []&#xd;
          },&#xd;
          {&#xd;
            &quot;typeId&quot;: &quot;148&quot;,&#xd;
            &quot;values&quot;: []&#xd;
          },&#xd;
          {&#xd;
            &quot;typeId&quot;: &quot;149&quot;,&#xd;
            &quot;values&quot;: []&#xd;
          },&#xd;
          {&#xd;
            &quot;typeId&quot;: &quot;150&quot;,&#xd;
            &quot;values&quot;: []&#xd;
          },&#xd;
          {&#xd;
            &quot;typeId&quot;: &quot;151&quot;,&#xd;
            &quot;values&quot;: []&#xd;
          },&#xd;
          {&#xd;
            &quot;typeId&quot;: &quot;152&quot;,&#xd;
            &quot;values&quot;: []&#xd;
          },&#xd;
          {&#xd;
            &quot;typeId&quot;: &quot;153&quot;,&#xd;
            &quot;values&quot;: []&#xd;
          },&#xd;
          {&#xd;
            &quot;typeId&quot;: &quot;154&quot;,&#xd;
            &quot;values&quot;: []&#xd;
          },&#xd;
          {&#xd;
            &quot;typeId&quot;: &quot;155&quot;,&#xd;
            &quot;values&quot;: []&#xd;
          },&#xd;
          {&#xd;
            &quot;typeId&quot;: &quot;156&quot;,&#xd;
            &quot;values&quot;: []&#xd;
          },&#xd;
          {&#xd;
            &quot;typeId&quot;: &quot;157&quot;,&#xd;
            &quot;values&quot;: []&#xd;
          },&#xd;
          {&#xd;
            &quot;typeId&quot;: &quot;158&quot;,&#xd;
            &quot;values&quot;: []&#xd;
          },&#xd;
          {&#xd;
            &quot;typeId&quot;: &quot;159&quot;,&#xd;
            &quot;values&quot;: []&#xd;
          },&#xd;
          {&#xd;
            &quot;typeId&quot;: &quot;163&quot;,&#xd;
            &quot;values&quot;: []&#xd;
          },&#xd;
          {&#xd;
            &quot;typeId&quot;: &quot;164&quot;,&#xd;
            &quot;values&quot;: []&#xd;
          },&#xd;
          {&#xd;
            &quot;typeId&quot;: &quot;165&quot;,&#xd;
            &quot;values&quot;: []&#xd;
          },&#xd;
          {&#xd;
            &quot;typeId&quot;: &quot;166&quot;,&#xd;
            &quot;values&quot;: []&#xd;
          },&#xd;
          {&#xd;
            &quot;typeId&quot;: &quot;167&quot;,&#xd;
            &quot;values&quot;: []&#xd;
          },&#xd;
          {&#xd;
            &quot;typeId&quot;: &quot;168&quot;,&#xd;
            &quot;values&quot;: []&#xd;
          },&#xd;
          {&#xd;
            &quot;typeId&quot;: &quot;169&quot;,&#xd;
            &quot;values&quot;: []&#xd;
          },&#xd;
          {&#xd;
            &quot;typeId&quot;: &quot;18&quot;,&#xd;
            &quot;values&quot;: []&#xd;
          },&#xd;
          {&#xd;
            &quot;typeId&quot;: &quot;170&quot;,&#xd;
            &quot;values&quot;: []&#xd;
          },&#xd;
          {&#xd;
            &quot;typeId&quot;: &quot;173&quot;,&#xd;
            &quot;values&quot;: []&#xd;
          },&#xd;
          {&#xd;
            &quot;typeId&quot;: &quot;174&quot;,&#xd;
            &quot;values&quot;: []&#xd;
          },&#xd;
          {&#xd;
            &quot;typeId&quot;: &quot;175&quot;,&#xd;
            &quot;values&quot;: []&#xd;
          },&#xd;
          {&#xd;
            &quot;typeId&quot;: &quot;176&quot;,&#xd;
            &quot;values&quot;: []&#xd;
          },&#xd;
          {&#xd;
            &quot;typeId&quot;: &quot;177&quot;,&#xd;
            &quot;values&quot;: []&#xd;
          },&#xd;
          {&#xd;
            &quot;typeId&quot;: &quot;178&quot;,&#xd;
            &quot;values&quot;: []&#xd;
          },&#xd;
          {&#xd;
            &quot;typeId&quot;: &quot;179&quot;,&#xd;
            &quot;values&quot;: []&#xd;
          },&#xd;
          {&#xd;
            &quot;typeId&quot;: &quot;180&quot;,&#xd;
            &quot;values&quot;: []&#xd;
          },&#xd;
          {&#xd;
            &quot;typeId&quot;: &quot;172&quot;,&#xd;
            &quot;values&quot;: []&#xd;
          },&#xd;
          {&#xd;
            &quot;typeId&quot;: &quot;181&quot;,&#xd;
            &quot;values&quot;: []&#xd;
          },&#xd;
          {&#xd;
            &quot;typeId&quot;: &quot;182&quot;,&#xd;
            &quot;values&quot;: []&#xd;
          },&#xd;
          {&#xd;
            &quot;typeId&quot;: &quot;171&quot;,&#xd;
            &quot;values&quot;: []&#xd;
          },&#xd;
          {&#xd;
            &quot;typeId&quot;: &quot;183&quot;,&#xd;
            &quot;values&quot;: []&#xd;
          },&#xd;
          {&#xd;
            &quot;typeId&quot;: &quot;184&quot;,&#xd;
            &quot;values&quot;: []&#xd;
          },&#xd;
          {&#xd;
            &quot;typeId&quot;: &quot;185&quot;,&#xd;
            &quot;values&quot;: []&#xd;
          },&#xd;
          {&#xd;
            &quot;typeId&quot;: &quot;186&quot;,&#xd;
            &quot;values&quot;: []&#xd;
          },&#xd;
          {&#xd;
            &quot;typeId&quot;: &quot;187&quot;,&#xd;
            &quot;values&quot;: []&#xd;
          },&#xd;
          {&#xd;
            &quot;typeId&quot;: &quot;188&quot;,&#xd;
            &quot;values&quot;: []&#xd;
          },&#xd;
          {&#xd;
            &quot;typeId&quot;: &quot;189&quot;,&#xd;
            &quot;values&quot;: []&#xd;
          },&#xd;
          {&#xd;
            &quot;typeId&quot;: &quot;190&quot;,&#xd;
            &quot;values&quot;: []&#xd;
          }&#xd;
        ]&#xd;
      },&#xd;
      {&#xd;
        &quot;instanceId&quot;: &quot;85cea8da-2573-4f85-aa7d-6837455b47f5&quot;,&#xd;
        &quot;keywords&quot;: [&#xd;
          {&#xd;
            &quot;typeId&quot;: &quot;102&quot;,&#xd;
            &quot;values&quot;: []&#xd;
          },&#xd;
          {&#xd;
            &quot;typeId&quot;: &quot;103&quot;,&#xd;
            &quot;values&quot;: []&#xd;
          },&#xd;
          {&#xd;
            &quot;typeId&quot;: &quot;104&quot;,&#xd;
            &quot;values&quot;: []&#xd;
          },&#xd;
          {&#xd;
            &quot;typeId&quot;: &quot;105&quot;,&#xd;
            &quot;values&quot;: []&#xd;
          },&#xd;
          {&#xd;
            &quot;typeId&quot;: &quot;106&quot;,&#xd;
            &quot;values&quot;: []&#xd;
          },&#xd;
          {&#xd;
            &quot;typeId&quot;: &quot;107&quot;,&#xd;
            &quot;values&quot;: []&#xd;
          },&#xd;
          {&#xd;
            &quot;typeId&quot;: &quot;108&quot;,&#xd;
            &quot;values&quot;: []&#xd;
          },&#xd;
          {&#xd;
            &quot;typeId&quot;: &quot;109&quot;,&#xd;
            &quot;values&quot;: []&#xd;
          },&#xd;
          {&#xd;
            &quot;typeId&quot;: &quot;110&quot;,&#xd;
            &quot;values&quot;: []&#xd;
          },&#xd;
          {&#xd;
            &quot;typeId&quot;: &quot;111&quot;,&#xd;
            &quot;values&quot;: []&#xd;
          },&#xd;
          {&#xd;
            &quot;typeId&quot;: &quot;112&quot;,&#xd;
            &quot;values&quot;: []&#xd;
          },&#xd;
          {&#xd;
            &quot;typeId&quot;: &quot;119&quot;,&#xd;
            &quot;values&quot;: []&#xd;
          },&#xd;
          {&#xd;
            &quot;typeId&quot;: &quot;113&quot;,&#xd;
            &quot;values&quot;: []&#xd;
          },&#xd;
          {&#xd;
            &quot;typeId&quot;: &quot;114&quot;,&#xd;
            &quot;values&quot;: []&#xd;
          },&#xd;
          {&#xd;
            &quot;typeId&quot;: &quot;115&quot;,&#xd;
            &quot;values&quot;: []&#xd;
          },&#xd;
          {&#xd;
            &quot;typeId&quot;: &quot;116&quot;,&#xd;
            &quot;values&quot;: []&#xd;
          },&#xd;
          {&#xd;
            &quot;typeId&quot;: &quot;117&quot;,&#xd;
            &quot;values&quot;: []&#xd;
          },&#xd;
          {&#xd;
            &quot;typeId&quot;: &quot;118&quot;,&#xd;
            &quot;values&quot;: []&#xd;
          }&#xd;
        ],&#xd;
        &quot;typeGroupId&quot;: &quot;101&quot;&#xd;
      },&#xd;
      {&#xd;
        &quot;keywords&quot;: [&#xd;
          {&#xd;
            &quot;typeId&quot;: &quot;160&quot;,&#xd;
            &quot;values&quot;: []&#xd;
          }&#xd;
        ]&#xd;
      }&#xd;
    ]&#xd;
  }&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">inforapia.hyland.com</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/ApiServer/onbase/core/documents</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">import org.apache.jmeter.protocol.http.control.Header;

sampler.getHeaderManager().add(new Header(&quot;Authorization&quot;,&quot;Bearer &quot; +vars.get(&quot;bearer_token&quot;)));
</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">ctx.getCurrentSampler().getHeaderManager().removeHeaderNamed(&quot;Authorization&quot;);</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">documentHandle</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.id</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">Notfound</stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="FetchToken Request" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="client_id" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">infor-idp-client</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">client_id</stringProp>
              </elementProp>
              <elementProp name="client_secret" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">secret</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">client_secret</stringProp>
              </elementProp>
              <elementProp name="grant_type" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">client_credentials</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">grant_type</stringProp>
              </elementProp>
              <elementProp name="scope" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">evolution</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">scope</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">inforapia.hyland.com</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/identityprovider/connect/token</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">auth_token</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.access_token</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">TokenNotFound</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
            <stringProp name="DurationAssertion.duration">500</stringProp>
          </DurationAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetDocumentURL" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;documentHandle&quot;: &quot;${documentHandle}&quot;,&#xd;
   &quot;overlay&quot;:&quot;&quot;&#xd;
} </stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">inforapia.hyland.com</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/OnBaseOnRampForInforWebApp/onbaseapi/url</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">import org.apache.jmeter.protocol.http.control.Header;

sampler.getHeaderManager().add(new Header(&quot;Authorization&quot;,&quot;Bearer &quot; +vars.get(&quot;auth_token&quot;)));
</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">ctx.getCurrentSampler().getHeaderManager().removeHeaderNamed(&quot;Authorization&quot;);</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetDocumenutPage" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;documentHandle&quot;: &quot;${documentHandle}&quot;,&#xd;
   &quot;overlay&quot;:&quot;&quot;&#xd;
} </stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">inforapia.hyland.com</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">OnBaseOnRampForInforWebApp/onbaseapi/content</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">import org.apache.jmeter.protocol.http.control.Header;

sampler.getHeaderManager().add(new Header(&quot;Authorization&quot;,&quot;Bearer &quot; +vars.get(&quot;auth_token&quot;)));
</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">ctx.getCurrentSampler().getHeaderManager().removeHeaderNamed(&quot;Authorization&quot;);</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="UpdateInvoice" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;SubmitMessageInputData&quot;:{&#xd;
		&quot;IncomingInvoiceHeader&quot;:{&#xd;
			&quot;ImageIndex&quot;:&quot;${documentHandle}&quot;,&#xd;
			&quot;FinanceGroup&quot;:&quot;DFLT&quot;,&#xd;
			&quot;Company&quot;:&quot;&quot;,&#xd;
			&quot;Vendor&quot;:&quot;&quot;,&#xd;
			&quot;Invoice&quot;:&quot;&quot;,&#xd;
			&quot;PurchaseOrderNumber&quot;:&quot;&quot;,&#xd;
			&quot;PurchaseOrderRelease&quot;:&quot;&quot;,&#xd;
			&quot;PurchaseOrderCode&quot;:&quot;&quot;,&#xd;
			&quot;Suffix&quot;:&quot;&quot;,&#xd;
			&quot;CancelSequence&quot;:&quot;&quot;,&#xd;
			&quot;InvoiceDate&quot;:&quot;8/15/2021&quot;,&#xd;
			&quot;VoucherNumber&quot;:&quot;&quot;,&#xd;
			&quot;InvoiceAmount&quot;:&quot;&quot;,&#xd;
			&quot;IncomeCode&quot;:&quot;&quot;,&#xd;
			&quot;CurrencyAmount&quot;:&quot;&quot;,&#xd;
			&quot;BatchNumber&quot;:&quot;&quot;,&#xd;
			&quot;DistributionDate&quot;:&quot;&quot;,&#xd;
			&quot;Description&quot;:&quot;&quot;,&#xd;
			&quot;InvoiceCurrency&quot;:&quot;&quot;,&#xd;
			&quot;OverrideExchangeRate&quot;:&quot;&quot;,&#xd;
			&quot;HandlingCode&quot;:&quot;&quot;,&#xd;
			&quot;TaxAmount&quot;:&quot;&quot;,&#xd;
			&quot;TaxCode&quot;:&quot;&quot;,&#xd;
			&quot;TaxableAmount&quot;:&quot;&quot;,&#xd;
			&quot;VendorGroup&quot;:&quot;&quot;,&#xd;
			&quot;RemitToLocation&quot;:&quot;&quot;,&#xd;
			&quot;ProcessLevel&quot;:&quot;&quot;,&#xd;
			&quot;BatchDate&quot;:&quot;&quot;,&#xd;
			&quot;InvoiceGroup&quot;:&quot;&quot;,&#xd;
			&quot;TermCode&quot;:&quot;&quot;,&#xd;
			&quot;DueDate&quot;:&quot;&quot;,&#xd;
			&quot;AuthorityCode&quot;:&quot;&quot;,&#xd;
			&quot;AccrualCode&quot;:&quot;&quot;,&#xd;
			&quot;InvoiceType&quot;:&quot;&quot;,&#xd;
			&quot;DiscountPercent&quot;:&quot;&quot;,&#xd;
			&quot;DiscountDate&quot;:&quot;&quot;,&#xd;
			&quot;DiscountCode&quot;:&quot;&quot;,&#xd;
			&quot;InvoiceSource&quot;:&quot;&quot;,&#xd;
			&quot;ReferenceType&quot;:&quot;&quot;,&#xd;
			&quot;CashCode&quot;:&quot;&quot;,&#xd;
			&quot;DistributionCode&quot;:&quot;&quot;,&#xd;
			&quot;CreationDate&quot;:&quot;&quot;,&#xd;
			&quot;Operator&quot;:&quot;&quot;,&#xd;
			&quot;VendorDetails&quot;:{&#xd;
				&quot;VendorName&quot;:&quot;&quot;,&#xd;
				&quot;VendorClass&quot;:&quot;&quot;,&#xd;
				&quot;Addr1&quot;:&quot;&quot;,&#xd;
				&quot;Addr2&quot;:&quot;&quot;,&#xd;
				&quot;City&quot;:&quot;&quot;,&#xd;
				&quot;State&quot;:&quot;&quot;,&#xd;
				&quot;PostalCode&quot;:&quot;&quot;&#xd;
			}&#xd;
		}&#xd;
	}&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">inforapia.hyland.com</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">OnBaseOnRampForInforWebApp/onbaseapi/update</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">import org.apache.jmeter.protocol.http.control.Header;

sampler.getHeaderManager().add(new Header(&quot;Authorization&quot;,&quot;Bearer &quot; +vars.get(&quot;auth_token&quot;)));
</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">
ctx.getCurrentSampler().getHeaderManager().removeHeaderNamed(&quot;Authorization&quot;);</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="TableVisualizer" testclass="ResultCollector" testname="View Results in Table" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultSaver guiclass="ResultSaverGui" testclass="ResultSaver" testname="Save Responses to a file" enabled="true">
          <stringProp name="FileSaver.filename"></stringProp>
          <boolProp name="FileSaver.errorsonly">false</boolProp>
          <boolProp name="FileSaver.successonly">false</boolProp>
          <boolProp name="FileSaver.skipsuffix">false</boolProp>
          <boolProp name="FileSaver.skipautonumber">false</boolProp>
        </ResultSaver>
        <hashTree/>
      </hashTree>
      <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="false">
        <stringProp name="delimiter">,</stringProp>
        <stringProp name="fileEncoding"></stringProp>
        <stringProp name="filename">C:/Users/dchoudhary/Desktop/jmeterDataset.csv</stringProp>
        <boolProp name="ignoreFirstLine">false</boolProp>
        <boolProp name="quotedData">false</boolProp>
        <boolProp name="recycle">true</boolProp>
        <stringProp name="shareMode">shareMode.all</stringProp>
        <boolProp name="stopThread">false</boolProp>
        <stringProp name="variableNames"></stringProp>
      </CSVDataSet>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetBearerToken" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="client_id" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">infor-idp-client</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">client_id</stringProp>
              </elementProp>
              <elementProp name="client_secret" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">secret</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">client_secret</stringProp>
              </elementProp>
              <elementProp name="grant_type" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">password</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">grant_type</stringProp>
              </elementProp>
              <elementProp name="scope" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">evolution</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">scope</stringProp>
              </elementProp>
              <elementProp name="username" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">MANAGER</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">username</stringProp>
              </elementProp>
              <elementProp name="password" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">master*1</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">password</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">inforapia.hyland.com</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/identityprovider/connect/token</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">bearer_token</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.access_token</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">TokenNotFound</stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="StageUpload" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;fileExtension&quot; : &quot;jpg&quot;,&#xd;
    &quot;fileSize&quot; :370024 &#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">inforapia.hyland.com</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/ApiServer/onbase/core/documents/uploads</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">import org.apache.jmeter.protocol.http.control.Header;

sampler.getHeaderManager().add(new Header(&quot;Authorization&quot;,&quot;Bearer &quot; +vars.get(&quot;bearer_token&quot;)));
</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">ctx.getCurrentSampler().getHeaderManager().removeHeaderNamed(&quot;Authorization&quot;);</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">Upload_ID</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.id</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">NotFound</stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="BinaryUpload" enabled="true">
          <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
            <collectionProp name="HTTPFileArgs.files">
              <elementProp name="C:\Users\mpradhan\OneDrive - Hyland Software\Pictures\image.jpg" elementType="HTTPFileArg">
                <stringProp name="File.path">C:\Users\mpradhan\OneDrive - Hyland Software\Pictures\image.jpg</stringProp>
                <stringProp name="File.paramname">Name</stringProp>
                <stringProp name="File.mimetype">Image/jpeg</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="filePart" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">1</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">filePart</stringProp>
                <stringProp name="HTTPArgument.content_type">image/jpg</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">inforapia.hyland.com</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/ApiServer/onbase/core/documents/uploads/${Upload_ID}?filePart=1</stringProp>
          <stringProp name="HTTPSampler.method">PUT</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">image/jpg</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">import org.apache.jmeter.protocol.http.control.Header;

sampler.getHeaderManager().add(new Header(&quot;Authorization&quot;,&quot;Bearer &quot; +vars.get(&quot;bearer_token&quot;)));
</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">ctx.getCurrentSampler().getHeaderManager().removeHeaderNamed(&quot;Authorization&quot;);</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DefaultKeywords" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">inforapia.hyland.com</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/apiserver/onbase/core/document-types/101/default-keywords</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">import org.apache.jmeter.protocol.http.control.Header;

sampler.getHeaderManager().add(new Header(&quot;Authorization&quot;,&quot;Bearer &quot; +vars.get(&quot;bearer_token&quot;)));
</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">ctx.getCurrentSampler().getHeaderManager().removeHeaderNamed(&quot;Authorization&quot;);</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">Keywordguid</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.keywordGuid</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">NotFound</stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <boolProp name="resetInterpreter">false</boolProp>
          <stringProp name="script">import org.apache.jmeter.protocol.http.control.Header;

sampler.getHeaderManager().add(new Header(&quot;Authorization&quot;,&quot;Bearer &quot; +vars.get(&quot;bearer_token&quot;)));
</stringProp>
        </BeanShellPreProcessor>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ArchiveDocument" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;documentTypeId&quot;: &quot;101&quot;,&#xd;
  &quot;fileTypeId&quot;: &quot;2&quot;,&#xd;
  &quot;uploads&quot;: [&#xd;
    {&#xd;
      &quot;id&quot;: &quot;${Upload_ID}&quot;&#xd;
    }&#xd;
  ],&#xd;
  &quot;keywordCollection&quot;: {&#xd;
    &quot;keywordGuid&quot;: &quot;${Keywordguid}&quot;,&#xd;
    &quot;items&quot;: [&#xd;
      {&#xd;
        &quot;keywords&quot;: [&#xd;
          {&#xd;
            &quot;typeId&quot;: &quot;161&quot;,&#xd;
            &quot;values&quot;: []&#xd;
          },&#xd;
          {&#xd;
            &quot;typeId&quot;: &quot;162&quot;,&#xd;
            &quot;values&quot;: []&#xd;
          },&#xd;
          {&#xd;
            &quot;typeId&quot;: &quot;120&quot;,&#xd;
            &quot;values&quot;: [&#xd;
              {&#xd;
                &quot;value&quot;: &quot;FEG&quot;&#xd;
              }&#xd;
            ]&#xd;
          },&#xd;
          {&#xd;
            &quot;typeId&quot;: &quot;121&quot;,&#xd;
            &quot;values&quot;: []&#xd;
          },&#xd;
          {&#xd;
            &quot;typeId&quot;: &quot;122&quot;,&#xd;
            &quot;values&quot;: [&#xd;
              {&#xd;
                &quot;value&quot;: &quot;9000&quot;&#xd;
              }&#xd;
            ]&#xd;
          },&#xd;
          {&#xd;
            &quot;typeId&quot;: &quot;123&quot;,&#xd;
            &quot;values&quot;: []&#xd;
          },&#xd;
          {&#xd;
            &quot;typeId&quot;: &quot;124&quot;,&#xd;
            &quot;values&quot;: [&#xd;
              {&#xd;
                &quot;value&quot;: &quot;1&quot;&#xd;
              }&#xd;
            ]&#xd;
          },&#xd;
          {&#xd;
            &quot;typeId&quot;: &quot;125&quot;,&#xd;
            &quot;values&quot;: [&#xd;
              {&#xd;
                &quot;value&quot;: &quot;US Vendor&quot;&#xd;
              }&#xd;
            ]&#xd;
          },&#xd;
          {&#xd;
            &quot;typeId&quot;: &quot;126&quot;,&#xd;
            &quot;values&quot;: [&#xd;
              {&#xd;
                &quot;value&quot;: &quot;Invoice100&quot;&#xd;
              }&#xd;
            ]&#xd;
          },&#xd;
          {&#xd;
            &quot;typeId&quot;: &quot;127&quot;,&#xd;
            &quot;values&quot;: []&#xd;
          },&#xd;
          {&#xd;
            &quot;typeId&quot;: &quot;128&quot;,&#xd;
            &quot;values&quot;: []&#xd;
          },&#xd;
          {&#xd;
            &quot;typeId&quot;: &quot;129&quot;,&#xd;
            &quot;values&quot;: []&#xd;
          },&#xd;
          {&#xd;
            &quot;typeId&quot;: &quot;130&quot;,&#xd;
            &quot;values&quot;: []&#xd;
          },&#xd;
          {&#xd;
            &quot;typeId&quot;: &quot;131&quot;,&#xd;
            &quot;values&quot;: []&#xd;
          },&#xd;
          {&#xd;
            &quot;typeId&quot;: &quot;132&quot;,&#xd;
            &quot;values&quot;: [&#xd;
              {&#xd;
                &quot;value&quot;: &quot;2021-08-10&quot;&#xd;
              }&#xd;
            ]&#xd;
          },&#xd;
          {&#xd;
            &quot;typeId&quot;: &quot;133&quot;,&#xd;
            &quot;values&quot;: []&#xd;
          },&#xd;
          {&#xd;
            &quot;typeId&quot;: &quot;134&quot;,&#xd;
            &quot;values&quot;: []&#xd;
          },&#xd;
          {&#xd;
            &quot;typeId&quot;: &quot;135&quot;,&#xd;
            &quot;values&quot;: [&#xd;
              {&#xd;
                &quot;value&quot;: &quot;100&quot;&#xd;
              }&#xd;
            ]&#xd;
          },&#xd;
          {&#xd;
            &quot;typeId&quot;: &quot;136&quot;,&#xd;
            &quot;values&quot;: []&#xd;
          },&#xd;
          {&#xd;
            &quot;typeId&quot;: &quot;137&quot;,&#xd;
            &quot;values&quot;: []&#xd;
          },&#xd;
          {&#xd;
            &quot;typeId&quot;: &quot;138&quot;,&#xd;
            &quot;values&quot;: []&#xd;
          },&#xd;
          {&#xd;
            &quot;typeId&quot;: &quot;139&quot;,&#xd;
            &quot;values&quot;: []&#xd;
          },&#xd;
          {&#xd;
            &quot;typeId&quot;: &quot;140&quot;,&#xd;
            &quot;values&quot;: []&#xd;
          },&#xd;
          {&#xd;
            &quot;typeId&quot;: &quot;141&quot;,&#xd;
            &quot;values&quot;: []&#xd;
          },&#xd;
          {&#xd;
            &quot;typeId&quot;: &quot;142&quot;,&#xd;
            &quot;values&quot;: []&#xd;
          },&#xd;
          {&#xd;
            &quot;typeId&quot;: &quot;1&quot;,&#xd;
            &quot;values&quot;: []&#xd;
          },&#xd;
          {&#xd;
            &quot;typeId&quot;: &quot;143&quot;,&#xd;
            &quot;values&quot;: []&#xd;
          },&#xd;
          {&#xd;
            &quot;typeId&quot;: &quot;144&quot;,&#xd;
            &quot;values&quot;: []&#xd;
          },&#xd;
          {&#xd;
            &quot;typeId&quot;: &quot;145&quot;,&#xd;
            &quot;values&quot;: []&#xd;
          },&#xd;
          {&#xd;
            &quot;typeId&quot;: &quot;146&quot;,&#xd;
            &quot;values&quot;: []&#xd;
          },&#xd;
          {&#xd;
            &quot;typeId&quot;: &quot;147&quot;,&#xd;
            &quot;values&quot;: []&#xd;
          },&#xd;
          {&#xd;
            &quot;typeId&quot;: &quot;148&quot;,&#xd;
            &quot;values&quot;: []&#xd;
          },&#xd;
          {&#xd;
            &quot;typeId&quot;: &quot;149&quot;,&#xd;
            &quot;values&quot;: []&#xd;
          },&#xd;
          {&#xd;
            &quot;typeId&quot;: &quot;150&quot;,&#xd;
            &quot;values&quot;: []&#xd;
          },&#xd;
          {&#xd;
            &quot;typeId&quot;: &quot;151&quot;,&#xd;
            &quot;values&quot;: []&#xd;
          },&#xd;
          {&#xd;
            &quot;typeId&quot;: &quot;152&quot;,&#xd;
            &quot;values&quot;: []&#xd;
          },&#xd;
          {&#xd;
            &quot;typeId&quot;: &quot;153&quot;,&#xd;
            &quot;values&quot;: []&#xd;
          },&#xd;
          {&#xd;
            &quot;typeId&quot;: &quot;154&quot;,&#xd;
            &quot;values&quot;: []&#xd;
          },&#xd;
          {&#xd;
            &quot;typeId&quot;: &quot;155&quot;,&#xd;
            &quot;values&quot;: []&#xd;
          },&#xd;
          {&#xd;
            &quot;typeId&quot;: &quot;156&quot;,&#xd;
            &quot;values&quot;: []&#xd;
          },&#xd;
          {&#xd;
            &quot;typeId&quot;: &quot;157&quot;,&#xd;
            &quot;values&quot;: []&#xd;
          },&#xd;
          {&#xd;
            &quot;typeId&quot;: &quot;158&quot;,&#xd;
            &quot;values&quot;: []&#xd;
          },&#xd;
          {&#xd;
            &quot;typeId&quot;: &quot;159&quot;,&#xd;
            &quot;values&quot;: []&#xd;
          },&#xd;
          {&#xd;
            &quot;typeId&quot;: &quot;163&quot;,&#xd;
            &quot;values&quot;: []&#xd;
          },&#xd;
          {&#xd;
            &quot;typeId&quot;: &quot;164&quot;,&#xd;
            &quot;values&quot;: []&#xd;
          },&#xd;
          {&#xd;
            &quot;typeId&quot;: &quot;165&quot;,&#xd;
            &quot;values&quot;: []&#xd;
          },&#xd;
          {&#xd;
            &quot;typeId&quot;: &quot;166&quot;,&#xd;
            &quot;values&quot;: []&#xd;
          },&#xd;
          {&#xd;
            &quot;typeId&quot;: &quot;167&quot;,&#xd;
            &quot;values&quot;: []&#xd;
          },&#xd;
          {&#xd;
            &quot;typeId&quot;: &quot;168&quot;,&#xd;
            &quot;values&quot;: []&#xd;
          },&#xd;
          {&#xd;
            &quot;typeId&quot;: &quot;169&quot;,&#xd;
            &quot;values&quot;: []&#xd;
          },&#xd;
          {&#xd;
            &quot;typeId&quot;: &quot;18&quot;,&#xd;
            &quot;values&quot;: []&#xd;
          },&#xd;
          {&#xd;
            &quot;typeId&quot;: &quot;170&quot;,&#xd;
            &quot;values&quot;: []&#xd;
          },&#xd;
          {&#xd;
            &quot;typeId&quot;: &quot;173&quot;,&#xd;
            &quot;values&quot;: []&#xd;
          },&#xd;
          {&#xd;
            &quot;typeId&quot;: &quot;174&quot;,&#xd;
            &quot;values&quot;: []&#xd;
          },&#xd;
          {&#xd;
            &quot;typeId&quot;: &quot;175&quot;,&#xd;
            &quot;values&quot;: []&#xd;
          },&#xd;
          {&#xd;
            &quot;typeId&quot;: &quot;176&quot;,&#xd;
            &quot;values&quot;: []&#xd;
          },&#xd;
          {&#xd;
            &quot;typeId&quot;: &quot;177&quot;,&#xd;
            &quot;values&quot;: []&#xd;
          },&#xd;
          {&#xd;
            &quot;typeId&quot;: &quot;178&quot;,&#xd;
            &quot;values&quot;: []&#xd;
          },&#xd;
          {&#xd;
            &quot;typeId&quot;: &quot;179&quot;,&#xd;
            &quot;values&quot;: []&#xd;
          },&#xd;
          {&#xd;
            &quot;typeId&quot;: &quot;180&quot;,&#xd;
            &quot;values&quot;: []&#xd;
          },&#xd;
          {&#xd;
            &quot;typeId&quot;: &quot;172&quot;,&#xd;
            &quot;values&quot;: []&#xd;
          },&#xd;
          {&#xd;
            &quot;typeId&quot;: &quot;181&quot;,&#xd;
            &quot;values&quot;: []&#xd;
          },&#xd;
          {&#xd;
            &quot;typeId&quot;: &quot;182&quot;,&#xd;
            &quot;values&quot;: []&#xd;
          },&#xd;
          {&#xd;
            &quot;typeId&quot;: &quot;171&quot;,&#xd;
            &quot;values&quot;: []&#xd;
          },&#xd;
          {&#xd;
            &quot;typeId&quot;: &quot;183&quot;,&#xd;
            &quot;values&quot;: []&#xd;
          },&#xd;
          {&#xd;
            &quot;typeId&quot;: &quot;184&quot;,&#xd;
            &quot;values&quot;: []&#xd;
          },&#xd;
          {&#xd;
            &quot;typeId&quot;: &quot;185&quot;,&#xd;
            &quot;values&quot;: []&#xd;
          },&#xd;
          {&#xd;
            &quot;typeId&quot;: &quot;186&quot;,&#xd;
            &quot;values&quot;: []&#xd;
          },&#xd;
          {&#xd;
            &quot;typeId&quot;: &quot;187&quot;,&#xd;
            &quot;values&quot;: []&#xd;
          },&#xd;
          {&#xd;
            &quot;typeId&quot;: &quot;188&quot;,&#xd;
            &quot;values&quot;: []&#xd;
          },&#xd;
          {&#xd;
            &quot;typeId&quot;: &quot;189&quot;,&#xd;
            &quot;values&quot;: []&#xd;
          },&#xd;
          {&#xd;
            &quot;typeId&quot;: &quot;190&quot;,&#xd;
            &quot;values&quot;: []&#xd;
          }&#xd;
        ]&#xd;
      },&#xd;
      {&#xd;
        &quot;instanceId&quot;: &quot;85cea8da-2573-4f85-aa7d-6837455b47f5&quot;,&#xd;
        &quot;keywords&quot;: [&#xd;
          {&#xd;
            &quot;typeId&quot;: &quot;102&quot;,&#xd;
            &quot;values&quot;: []&#xd;
          },&#xd;
          {&#xd;
            &quot;typeId&quot;: &quot;103&quot;,&#xd;
            &quot;values&quot;: []&#xd;
          },&#xd;
          {&#xd;
            &quot;typeId&quot;: &quot;104&quot;,&#xd;
            &quot;values&quot;: []&#xd;
          },&#xd;
          {&#xd;
            &quot;typeId&quot;: &quot;105&quot;,&#xd;
            &quot;values&quot;: []&#xd;
          },&#xd;
          {&#xd;
            &quot;typeId&quot;: &quot;106&quot;,&#xd;
            &quot;values&quot;: []&#xd;
          },&#xd;
          {&#xd;
            &quot;typeId&quot;: &quot;107&quot;,&#xd;
            &quot;values&quot;: []&#xd;
          },&#xd;
          {&#xd;
            &quot;typeId&quot;: &quot;108&quot;,&#xd;
            &quot;values&quot;: []&#xd;
          },&#xd;
          {&#xd;
            &quot;typeId&quot;: &quot;109&quot;,&#xd;
            &quot;values&quot;: []&#xd;
          },&#xd;
          {&#xd;
            &quot;typeId&quot;: &quot;110&quot;,&#xd;
            &quot;values&quot;: []&#xd;
          },&#xd;
          {&#xd;
            &quot;typeId&quot;: &quot;111&quot;,&#xd;
            &quot;values&quot;: []&#xd;
          },&#xd;
          {&#xd;
            &quot;typeId&quot;: &quot;112&quot;,&#xd;
            &quot;values&quot;: []&#xd;
          },&#xd;
          {&#xd;
            &quot;typeId&quot;: &quot;119&quot;,&#xd;
            &quot;values&quot;: []&#xd;
          },&#xd;
          {&#xd;
            &quot;typeId&quot;: &quot;113&quot;,&#xd;
            &quot;values&quot;: []&#xd;
          },&#xd;
          {&#xd;
            &quot;typeId&quot;: &quot;114&quot;,&#xd;
            &quot;values&quot;: []&#xd;
          },&#xd;
          {&#xd;
            &quot;typeId&quot;: &quot;115&quot;,&#xd;
            &quot;values&quot;: []&#xd;
          },&#xd;
          {&#xd;
            &quot;typeId&quot;: &quot;116&quot;,&#xd;
            &quot;values&quot;: []&#xd;
          },&#xd;
          {&#xd;
            &quot;typeId&quot;: &quot;117&quot;,&#xd;
            &quot;values&quot;: []&#xd;
          },&#xd;
          {&#xd;
            &quot;typeId&quot;: &quot;118&quot;,&#xd;
            &quot;values&quot;: []&#xd;
          }&#xd;
        ],&#xd;
        &quot;typeGroupId&quot;: &quot;101&quot;&#xd;
      },&#xd;
      {&#xd;
        &quot;keywords&quot;: [&#xd;
          {&#xd;
            &quot;typeId&quot;: &quot;160&quot;,&#xd;
            &quot;values&quot;: []&#xd;
          }&#xd;
        ]&#xd;
      }&#xd;
    ]&#xd;
  }&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">inforapia.hyland.com</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/ApiServer/onbase/core/documents</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">ctx.getCurrentSampler().getHeaderManager().removeHeaderNamed(&quot;Authorization&quot;);</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">documentHandle</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.id</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">Notfound</stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="FetchToken Request" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="client_id" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">infor-idp-client</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">client_id</stringProp>
              </elementProp>
              <elementProp name="client_secret" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">secret</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">client_secret</stringProp>
              </elementProp>
              <elementProp name="grant_type" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">client_credentials</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">grant_type</stringProp>
              </elementProp>
              <elementProp name="scope" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">evolution</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">scope</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">inforapia.hyland.com</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/identityprovider/connect/token</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">auth_token</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.access_token</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">TokenNotFound</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
            <stringProp name="DurationAssertion.duration">500</stringProp>
          </DurationAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetDocumentURL" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;documentHandle&quot;: &quot;${documentHandle}&quot;,&#xd;
   &quot;overlay&quot;:&quot;&quot;&#xd;
} </stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">inforapia.hyland.com</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/OnBaseOnRampForInforWebApp/onbaseapi/url</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">import org.apache.jmeter.protocol.http.control.Header;

sampler.getHeaderManager().add(new Header(&quot;Authorization&quot;,&quot;Bearer &quot; +vars.get(&quot;auth_token&quot;)));
</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">ctx.getCurrentSampler().getHeaderManager().removeHeaderNamed(&quot;Authorization&quot;);</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetDocumenutPage" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;documentHandle&quot;: &quot;${documentHandle}&quot;,&#xd;
   &quot;overlay&quot;:&quot;&quot;&#xd;
} </stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">inforapia.hyland.com</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">OnBaseOnRampForInforWebApp/onbaseapi/content</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">import org.apache.jmeter.protocol.http.control.Header;

sampler.getHeaderManager().add(new Header(&quot;Authorization&quot;,&quot;Bearer &quot; +vars.get(&quot;auth_token&quot;)));
</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">ctx.getCurrentSampler().getHeaderManager().removeHeaderNamed(&quot;Authorization&quot;);</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="UpdateInvoice" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;SubmitMessageInputData&quot;:{&#xd;
		&quot;IncomingInvoiceHeader&quot;:{&#xd;
			&quot;ImageIndex&quot;:&quot;${documentHandle}&quot;,&#xd;
			&quot;FinanceGroup&quot;:&quot;DFLT&quot;,&#xd;
			&quot;Company&quot;:&quot;&quot;,&#xd;
			&quot;Vendor&quot;:&quot;&quot;,&#xd;
			&quot;Invoice&quot;:&quot;&quot;,&#xd;
			&quot;PurchaseOrderNumber&quot;:&quot;&quot;,&#xd;
			&quot;PurchaseOrderRelease&quot;:&quot;&quot;,&#xd;
			&quot;PurchaseOrderCode&quot;:&quot;&quot;,&#xd;
			&quot;Suffix&quot;:&quot;&quot;,&#xd;
			&quot;CancelSequence&quot;:&quot;&quot;,&#xd;
			&quot;InvoiceDate&quot;:&quot;8/15/2021&quot;,&#xd;
			&quot;VoucherNumber&quot;:&quot;&quot;,&#xd;
			&quot;InvoiceAmount&quot;:&quot;&quot;,&#xd;
			&quot;IncomeCode&quot;:&quot;&quot;,&#xd;
			&quot;CurrencyAmount&quot;:&quot;&quot;,&#xd;
			&quot;BatchNumber&quot;:&quot;&quot;,&#xd;
			&quot;DistributionDate&quot;:&quot;&quot;,&#xd;
			&quot;Description&quot;:&quot;&quot;,&#xd;
			&quot;InvoiceCurrency&quot;:&quot;&quot;,&#xd;
			&quot;OverrideExchangeRate&quot;:&quot;&quot;,&#xd;
			&quot;HandlingCode&quot;:&quot;&quot;,&#xd;
			&quot;TaxAmount&quot;:&quot;&quot;,&#xd;
			&quot;TaxCode&quot;:&quot;&quot;,&#xd;
			&quot;TaxableAmount&quot;:&quot;&quot;,&#xd;
			&quot;VendorGroup&quot;:&quot;&quot;,&#xd;
			&quot;RemitToLocation&quot;:&quot;&quot;,&#xd;
			&quot;ProcessLevel&quot;:&quot;&quot;,&#xd;
			&quot;BatchDate&quot;:&quot;&quot;,&#xd;
			&quot;InvoiceGroup&quot;:&quot;&quot;,&#xd;
			&quot;TermCode&quot;:&quot;&quot;,&#xd;
			&quot;DueDate&quot;:&quot;&quot;,&#xd;
			&quot;AuthorityCode&quot;:&quot;&quot;,&#xd;
			&quot;AccrualCode&quot;:&quot;&quot;,&#xd;
			&quot;InvoiceType&quot;:&quot;&quot;,&#xd;
			&quot;DiscountPercent&quot;:&quot;&quot;,&#xd;
			&quot;DiscountDate&quot;:&quot;&quot;,&#xd;
			&quot;DiscountCode&quot;:&quot;&quot;,&#xd;
			&quot;InvoiceSource&quot;:&quot;&quot;,&#xd;
			&quot;ReferenceType&quot;:&quot;&quot;,&#xd;
			&quot;CashCode&quot;:&quot;&quot;,&#xd;
			&quot;DistributionCode&quot;:&quot;&quot;,&#xd;
			&quot;CreationDate&quot;:&quot;&quot;,&#xd;
			&quot;Operator&quot;:&quot;&quot;,&#xd;
			&quot;VendorDetails&quot;:{&#xd;
				&quot;VendorName&quot;:&quot;&quot;,&#xd;
				&quot;VendorClass&quot;:&quot;&quot;,&#xd;
				&quot;Addr1&quot;:&quot;&quot;,&#xd;
				&quot;Addr2&quot;:&quot;&quot;,&#xd;
				&quot;City&quot;:&quot;&quot;,&#xd;
				&quot;State&quot;:&quot;&quot;,&#xd;
				&quot;PostalCode&quot;:&quot;&quot;&#xd;
			}&#xd;
		}&#xd;
	}&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">inforapia.hyland.com</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">OnBaseOnRampForInforWebApp/onbaseapi/update</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">import org.apache.jmeter.protocol.http.control.Header;

sampler.getHeaderManager().add(new Header(&quot;Authorization&quot;,&quot;Bearer &quot; +vars.get(&quot;auth_token&quot;)));
</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">
ctx.getCurrentSampler().getHeaderManager().removeHeaderNamed(&quot;Authorization&quot;);</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetURL Request" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;documentHandle&quot;: &quot;103&quot;,&#xd;
   &quot;overlay&quot;:&quot;&quot;&#xd;
} </stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">in01-dev448.pvi.com</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/OnBaseOnRampForInforWebApp/onbaseapi/url</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${auth_token}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">import org.apache.jmeter.protocol.http.control.Header;
sampler.getHeaderManager().add(new Header(&quot;Authorization&quot;,&quot;Bearer &quot; +vars.get(&quot;auth_token&quot;)));
</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="TableVisualizer" testclass="ResultCollector" testname="View Results in Table" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultSaver guiclass="ResultSaverGui" testclass="ResultSaver" testname="Save Responses to a file" enabled="true">
          <stringProp name="FileSaver.filename"></stringProp>
          <boolProp name="FileSaver.errorsonly">false</boolProp>
          <boolProp name="FileSaver.successonly">false</boolProp>
          <boolProp name="FileSaver.skipsuffix">false</boolProp>
          <boolProp name="FileSaver.skipautonumber">false</boolProp>
        </ResultSaver>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
